pipeline {
    agent {
        label 'master'
    }

    environment {
        ASPNETCORE_ENVIRONMENT = 'QA'
        SONAR_SCANNER = tool 'sonar-scanner-netcore2'
    }

    stages {

        stage("Build Project") {
            
            steps {
                echo 'Build Project STARTED'

                powershell '''
                  dotnet build /nodereuse:false Atlanta.Service.Renewal.sln 
                '''
            }

            post {
                failure {
                    echo 'Build Project FAILURE'
                }
            }
        }

         stage("API Testing"){
          steps {
            bat '''
                dotnet test src/Renewal.API.UnitTests/Renewal.API.UnitTests.csproj -c Debug -r ./Test-results/UnitTests -l:"trx;LogFileName=api-test-result.trx" ^
                  /p:CollectCoverage=true /p:CoverletOutput="Test-results/Coverage/coverage.xml" ^
                  /p:CoverletOutputFormat=opencover ^
                  /p:Exclude=\\"[xunit.*]*,[Renewal.Domain*]*,[Renewal.API.UnitTests*]*,[Renewal.API]Renewal.API.Program,[Renewal.API]Renewal.API.Startup*,[Renewal.API]Renewal.API.Models.*,[Renewal.API]Renewal.API.Extensions.*\\"
              '''
          }

          post {
              failure {
                  echo 'API Testing FAILURE'
              }
            }
		    }

        stage("Application Testing"){
          steps {
            bat '''
                dotnet test src/Renewal.Application.UnitTests/Renewal.Application.UnitTests.csproj -c Debug -r ./Test-results/UnitTests -l:"trx;LogFileName=domain-test-result.trx" ^
                  /p:CollectCoverage=true /p:CoverletOutput="Test-results/Coverage/coverage.xml" ^
                  /p:CoverletOutputFormat=opencover ^
                  /p:Exclude=\\"[xunit.*]*,[Renewal.UnitTests.UnitTests*]*,[Renewal.Application]Renewal.Application.Models.*\\"
              '''
          }

          post {
              failure {
                  echo 'Domain Testing FAILURE'
              }
            }
		    }

        stage("Sonar Quality Gate"){
          steps {
            withSonarQubeEnv('SonarQube-qa-build') {
              powershell '''
                dotnet "$env:SONAR_SCANNER\\SonarScanner.MSBuild.dll" begin /k:"$env:QA_RENEWAL_SONAR_PROJECT" /d:sonar.cs.opencover.reportsPaths="src/Renewal.API.UnitTests/Test-results/Coverage/coverage.xml,src/Vehicle.Application.UnitTests/Test-results/Coverage/coverage.xml"
                dotnet build /nodereuse:false Atlanta.Service.Renewal.sln 
                dotnet "$env:SONAR_SCANNER\\SonarScanner.MSBuild.dll" end
              '''                
            }
            
            timeout(time: 2, unit: 'MINUTES') {
              waitForQualityGate abortPipeline: false
            }

          }

            post {
                success {
                    echo 'Sonar SUCCESSFUL'
                } 
 
                failure {
                    echo 'Sonar FAILURE'
                }
            }
        }

         stage("Create Artifacts"){
          steps {
            powershell '''
              $WorkSpacePath = "${env:WORKSPACE}\\src"
              $ArtifactsPath = "${env:QA_ARTIFACTS_PATH}\\Renewal"
              if ( Test-Path -Path $ArtifactsPath){
				        Remove-Item $ArtifactsPath -Force -Recurse
				    }
            md $ArtifactsPath
            xcopy /E /I ${WorkSpacePath} ${ArtifactsPath}
            '''
          }

          post {
            failure {
              echo 'Create Artifacts FAILURE'
            }
          }
        }
    }

    post {
            always {
                mstest testResultsFile:"**/*-test-result.trx", failOnError: true, keepLongStdio: true
            }

            success {
                echo 'Finalization SUCCESSFUL'
            }

            failure {
                echo 'Finalization FAILURE'
            }
        }
}
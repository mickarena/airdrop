pipeline {
    agent {
        label 'master'
    }

    environment {
        ASPNETCORE_ENVIRONMENT = 'Production'
    }

    stages {

        stage("Build Project") {
            
            steps {
                echo 'Build Project STARTED'

                powershell '''
                  $jsonPath= "src/Renewal.API/appsettings.json"
                  $s = Get-Content $jsonPath -Raw
                  $s = $s.Replace("-{environment}", "") | ConvertFrom-Json
                  $s.Serilog.WriteTo[0].Args.requestUri=$env:PROD_LOGGING_URL
                  $s.AzureKeyVault.Url=$env:PROD_AZURE_KEYVAULT_APP_URL
                  $s.AzureKeyVault.ApplicationId=$env:PROD_AZURE_KEYVAULT_APP_ID
                  $s.AzureKeyVault.ApplicationSecret=$env:PROD_AZURE_KEYVAULT_APP_SECRET
                  $s|ConvertTo-Json -Depth 9 |Set-Content $jsonPath  
                  dotnet build /nodereuse:false Atlanta.Service.Renewal.sln 
                '''
            }

            post {
                failure {
                    echo 'Build Project FAILURE'
                }
            }
        }

         stage("API Testing"){
          steps {
            bat '''
                dotnet test src/Renewal.API.UnitTests/Renewal.API.UnitTests.csproj -c Debug -r ./Test-results/UnitTests -l:"trx;LogFileName=api-test-result.trx" ^
                  /p:CollectCoverage=true /p:CoverletOutput="Test-results/Coverage/coverage.xml" ^
                  /p:CoverletOutputFormat=opencover ^
                  /p:Exclude=\\"[xunit.*]*,[Renewal.Domain*]*,[Renewal.API.UnitTests*]*,[Renewal.API]Renewal.API.Program,[Renewal.API]Renewal.API.Startup*,[Renewal.API]Renewal.API.Models.*,[Renewal.API]Renewal.API.Extensions.*\\"
              '''
          }

          post {
              failure {
                  echo 'API Testing FAILURE'
              }
            }
		    }

        stage("Application Testing"){
          steps {
            bat '''
                dotnet test src/Renewal.Application.UnitTests/Renewal.Application.UnitTests.csproj -c Debug -r ./Test-results/UnitTests -l:"trx;LogFileName=domain-test-result.trx" ^
                  /p:CollectCoverage=true /p:CoverletOutput="Test-results/Coverage/coverage.xml" ^
                  /p:CoverletOutputFormat=opencover ^
                  /p:Exclude=\\"[xunit.*]*,[Renewal.UnitTests.UnitTests*]*,[Renewal.Application]Renewal.Application.Models.*\\"
              '''
          }

          post {
              failure {
                  echo 'Domain Testing FAILURE'
              }
            }
		    }

        // stage("Sonar Quality Gate"){
        //   steps {
        //     withSonarQubeEnv('SonarQube-qa-build') {
        //       powershell '''
        //         dotnet "$env:SONAR_SCANNER\\SonarScanner.MSBuild.dll" begin /k:"$env:PROD_SONAR_RENEWAL" /d:sonar.cs.opencover.reportsPaths="src/Renewal.API.UnitTests/Test-results/Coverage/coverage.xml,src/Renewal.Application.UnitTests/Test-results/Coverage/coverage.xml"
        //         dotnet build /nodereuse:false src/Atlanta.Service.Renewal.sln 
        //         dotnet "$env:SONAR_SCANNER\\SonarScanner.MSBuild.dll" end
        //       '''                
        //     }
            
        //     timeout(time: 2, unit: 'MINUTES') {
        //       waitForQualityGate abortPipeline: false
        //     }

        //   }

        //     post {
        //         success {
        //             notifyBuild('Sonar', 'SUCCESSFUL')
        //         } 
 
        //         failure {
        //             notifyBuild('Sonar', 'UNSTABLE')
        //         }
        //     }
        // }

        stage("Push image"){
          steps {
            powershell '''
              cd src
              $Image = "${env:RENEWAL_DOCKER_IMAGE}:${env:PROD_SERVICE_BUILD_VERSION}.${env:BUILD_NUMBER}"
              docker build -t $Image -f Renewal.API/Dockerfile --build-arg Build_Env=$env:ASPNETCORE_ENVIRONMENT .
              docker tag $Image $env:PROD_DOCKER_REPO_HOST/$Image
              docker push $env:PROD_DOCKER_REPO_HOST/$Image
            '''
          }

          post {
            failure {
              echo 'Push image FAILURE'
            }
          }
        }

        stage("Deploy swarm"){
          steps {
            echo 'Deploy Swarm STARTED'

            powershell '''
              $Image = "${env:PROD_DOCKER_REPO_HOST}/${env:RENEWAL_DOCKER_IMAGE}:${env:PROD_SERVICE_BUILD_VERSION}.${env:BUILD_NUMBER}"
              $ServiceName = $env:RENEWAL_SERVICE_NAME
              $Network = $env:SWARM_NETWORK

              Invoke-Command -ComputerName $env:PROD_DOCKER_DEPLOYMENT_TARGET -ErrorAction:Stop -ScriptBlock {
                docker container prune -f
                docker pull $Using:Image
                $isExisted = (docker service ls | Select-String $Using:ServiceName).Length
                if($isExisted -eq 1) {
	                  docker service update --image $Using:Image $Using:ServiceName
                }
                else {
	                  docker service create --name $Using:ServiceName --replicas 3 --update-delay 7s --update-parallelism 1 --network $Using:Network $Using:Image
                }
              }

            '''
          }

          post {
            failure {
              echo 'Deploy swarm FAILURE'
            }
          }
        }
    }

    post {
            always {
                mstest testResultsFile:"**/*-test-result.trx", failOnError: true, keepLongStdio: true
            }

            success {
                echo 'Finalization SUCCESSFUL'
            }

            failure {
                echo 'Finalization FAILURE'
            }
        }
}
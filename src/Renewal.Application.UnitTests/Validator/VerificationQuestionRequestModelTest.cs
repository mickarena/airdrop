using Renewal.Application.Models.ProcessingData;
using Renewal.Application.Validator.ProcessingData;
using System;
using Xunit;

namespace Renewal.Application.UnitTests.Validator
{
    public class VerificationQuestionRequestModelTest
    {
        private readonly VerificationQuestionRequestModel _model;
        private readonly VerificationQuestionRequestModelValidator _validator;

        public VerificationQuestionRequestModelTest()
        {
            _model = new VerificationQuestionRequestModel
            {
                FirstNames = "test",
                EmailAddress = "abc@gmail.com",
                PolicyReference = "7777777/22",
                BirthDate = DateTime.Now,
                Surname = "Surname"
            };

            _validator = new VerificationQuestionRequestModelValidator();
        }

        [Fact]
        public void ShouldSuccess_When_Model_Is_Valid()
        {
            var result = _validator.Validate(_model);
            Assert.True(result.IsValid);
        }

        [Theory]
        [InlineData(null)]
        [InlineData("")]
        public void ShouldFail_When_Name_Is_Empty(string name)
        {
            _model.FirstNames = name;
            var result = _validator.Validate(_model);
            Assert.False(result.IsValid);
        }

        [Theory]
        [InlineData
        public void ShouldFail_When_FirstNames_Is_Greater_Than_250Chars(string name)
        {
            _model.FirstNames = name;
            var result = _validator.Validate(_model);
            Assert.False(result.IsValid);
        }

        [Theory]
        [InlineData
        public void ShouldFail_When_Surname_Is_Greater_Than_250Chars(string name)
        {
            _model.Surname = name;
            var result = _validator.Validate(_model);
            Assert.False(result.IsValid);
        }

        [Theory]
        [InlineData("")]
        public void ShouldFail_When_PolicyReference_Is_Empty(string policy)
        {
            _model.PolicyReference = policy;
            var result = _validator.Validate(_model);
            Assert.False(result.IsValid);
        }

        [Theory]
        [InlineData(null)]
        public void ShouldFail_When_BirthDate_Is_Null(DateTime? name)
        {
            _model.BirthDate = name;
            var result = _validator.Validate(_model);
            Assert.False(result.IsValid);
        }


        [Theory]
        [InlineData(null)]
        [InlineData("")]
        public void ShouldFail_When_Email_Is_Null(string email)
        {
            _model.EmailAddress = email;
            var result = _validator.Validate(_model);
            Assert.False(result.IsValid);
        }


        [Theory]
        [InlineData("abc")]
        public void ShouldFail_When_Email_Is_InvalidType(string email)
        {
            _model.EmailAddress = email;
            var result = _validator.Validate(_model);
            Assert.False(result.IsValid);
        }
    }
}
